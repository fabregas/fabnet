#!/usr/bin/python
import unittest
import time
import os
import logging
import threading
import json
import random
import subprocess
import signal
import sqlite3
import shutil
import hashlib
import string
from fabnet.utils.logger import logger

from fabnet.core.fri_server import FriClient, FabnetPacketRequest
logger.setLevel(logging.DEBUG)

NODES_COUNT = 16
PROCESSES = []
ADDRESSES = []

DEBUG = False

class TestBigNework(unittest.TestCase):
    def test_00_create_network(self):
        try:
            self.create_net(NODES_COUNT/2)
            keys = self.put_data()
            self.print_ranges()

            self.create_net(NODES_COUNT/2)
            time.sleep(40)

            self.get_data(keys)
            self.print_ranges()

            self.stop_nodes(2)
            time.sleep(60)
            self.get_data(keys)
            self.print_ranges()

            self.stop_nodes(NODES_COUNT/3-2)
            time.sleep(120)
            self.print_ranges()
        finally:
            for process in PROCESSES:
                process.send_signal(signal.SIGINT)
            print 'SENDED SIGNALS'
            for process in PROCESSES:
                process.wait()
            print 'STOPPED'


    def __test_cycled_start(self):
        global PROCESSES
        for i in xrange(10):
            try:
                self.create_net(3)
            finally:
                for process in PROCESSES:
                    process.send_signal(signal.SIGINT)
                print 'SENDED SIGNALS'
                for process in PROCESSES:
                    process.wait()
                PROCESSES = []
                print 'STOPPED'

    def stop_nodes(self, nodes_count):
        for i in xrange(nodes_count):
            n_node = random.choice(ADDRESSES)
            idx = ADDRESSES.index(n_node)
            proc = PROCESSES[idx]
            print 'Stopping %s ...'%n_node
            proc.send_signal(signal.SIGINT)
            proc.wait()
            del PROCESSES[idx]
            del ADDRESSES[idx]


    def _wait_node(self, node):
        client = FriClient()
        while True:
            packet_obj = FabnetPacketRequest(method='NodeStatistic', sync=True)
            ret_packet = client.call_sync(node, packet_obj)
            if ret_packet.ret_code:
                print 'Node does not init FRI server yet. Waiting it...'
                time.sleep(.5)
                continue
            break

    def create_net(self, nodes_count):
        global PROCESSES
        global ADDRESSES

        for unuse in range(nodes_count):
            if not ADDRESSES:
                n_node = 'init-fabnet'
                i = 1900
            else:
                n_node = random.choice(ADDRESSES)
                i = int(ADDRESSES[-1].split(':')[-1])+1
                self._wait_node(n_node)

            address = '127.0.0.1:%s'%i
            ADDRESSES.append(address)

            home = '/tmp/node_%s'%i
            if os.path.exists(home):
                shutil.rmtree(home)
            os.mkdir(home)

            logger.warning('{SNP} STARTING NODE %s'%address)
            args = ['/usr/bin/python', './fabnet/bin/fabnet-node', address, n_node, '%.02i'%i, home]
            if DEBUG:
                args.append('--debug')
            p = subprocess.Popen(args)
            logger.warning('{SNP} PROCESS STARTED')
            time.sleep(0.1)

            PROCESSES.append(p)
            #if len(ADDRESSES) > 2:
            #    self._check_stat(address)

        for address in ADDRESSES:
            self._check_stat(address)

        p = subprocess.Popen(['/usr/bin/python', './fabnet/bin/fri-caller', 'TopologyCognition', address])
        node_i = address.split(':')[-1]
        self._wait_topology(node_i, len(ADDRESSES))
        os.system('python ./tests/topology_to_tgf /tmp/node_%s/fabnet_topology.db /tmp/fabnet_topology.%s-orig.tgf'%(node_i, len(ADDRESSES)))

        print 'NETWORK STARTED. TOPOLOGY COLLECTED'


    def put_data(self):
        print 'PUT ALL DATA'
        client = FriClient()
        keys = []
        for i in xrange(1000):
            data = ''.join(random.choice(string.letters) for i in xrange(1000))
            checksum =  hashlib.sha1(data).hexdigest()

            params = {'checksum': checksum, 'wait_writes_count': 2}
            packet_obj = FabnetPacketRequest(method='ClientPutData', parameters=params, binary_data=data, sync=True)
            nodeaddr = random.choice(ADDRESSES)

            ret_packet = client.call_sync(nodeaddr, packet_obj)
            self.assertEqual(ret_packet.ret_code, 0, ret_packet.ret_message)
            self.assertEqual(len(ret_packet.ret_parameters.get('key')), 40)
            keys.append(ret_packet.ret_parameters.get('key'))

        return keys

    def print_ranges(self):
        client = FriClient()
        print 'RANGES SIZES:'
        for address in ADDRESSES:
            packet_obj = FabnetPacketRequest(method='NodeStatistic', sync=True)
            ret_packet = client.call_sync(address, packet_obj)
            start = ret_packet.ret_parameters['range_start']
            end = ret_packet.ret_parameters['range_end']
            len_r = long(end, 16) - long(start, 16)
            print 'On node %s: {%s-%s}[%s] = %s KB (%s KB)'%(address, start, end, len_r,\
                     ret_packet.ret_parameters['range_size']/1024, ret_packet.ret_parameters['replicas_size']/1024)



    def get_data(self, keys):
        print 'GET ALL DATA'
        client = FriClient()

        for key in keys:
            params = {'key': key, 'replica_count':2}
            packet_obj = FabnetPacketRequest(method='ClientGetData', parameters=params, sync=True)
            nodeaddr = random.choice(ADDRESSES)

            ret_packet = client.call_sync(nodeaddr, packet_obj)
            self.assertEqual(ret_packet.ret_code, 0, ret_packet.ret_message+'. key=%s'%key)
            data = ret_packet.binary_data

            self.assertTrue(len(data) > 0, key)
            self.assertEqual(hashlib.sha1(data).hexdigest(), ret_packet.ret_parameters['checksum'])



    def _check_stat(self, address):
        client = FriClient()

        while True:
            try:
                packet_obj = FabnetPacketRequest(method='NodeStatistic', sync=True)
                ret_packet = client.call_sync(address, packet_obj)
                if ret_packet.ret_code:
                    time.sleep(.5)
                    continue

                uppers_balance = int(ret_packet.ret_parameters[u'uppers_balance'])
                superiors_balance = int(ret_packet.ret_parameters[u'superiors_balance'])
                if uppers_balance >= 0 and superiors_balance >= 0:
                    if ret_packet.ret_parameters['status'] == 'normwork':
                        break
                    print 'Node %s is not initialized as DHT member yet! Waiting...'%(address)
                else:
                    print 'Node %s is not balanced yet! Waiting...'%address
                time.sleep(.5)
            except Exception, err:
                logger.error('ERROR: %s'%err)
                raise err

    def _wait_topology(self, node_i, nodes_count):
        conn = None
        while True:
            try:
                db = '/tmp/node_%s/fabnet_topology.db'%node_i

                while not os.path.exists(db):
                    print '%s not exists!'%db
                    time.sleep(0.2)

                time.sleep(.5)
                conn = sqlite3.connect(db)
                curs = conn.cursor()
                curs.execute("SELECT count(node_address) FROM fabnet_nodes WHERE old_data=0")
                rows = curs.fetchall()
                print 'nodes discovered: %s'%rows[0][0]
                if int(rows[0][0]) != nodes_count:
                    time.sleep(.5)
                else:
                    break
            finally:
                if conn:
                    curs.close()
                    conn.close()


if __name__ == '__main__':
    unittest.main()

