#!/usr/bin/python

import os
import sys
import subprocess

# UPGRADE_VERSION
# fabnet/
#    /bin
#        upgrade-node
# upgrades/
#    /scripts
UP_VER_FILE = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../UPGRADE_VERSION'))
SCRIPTS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../upgrades/scripts'))

def get_current_upgrade_ver():
    if not os.path.exists(UP_VER_FILE):
        open(UP_VER_FILE, 'w').write('0')

    ver = open(UP_VER_FILE).read().strip()
    try:
        ver = int(ver)
    except ValueError, err:
        raise Exception('UPGRADE_VERSION content "%s" is invalid!'%val)

    return ver

def update_current_upgrade_ver(ver):
    open(UP_VER_FILE, 'w').write('%s'%ver)

def get_next_upgrade_script(cur_ver):
    files = os.listdir(SCRIPTS_DIR)
    scripts = {}
    for file_name in files:
        if not file_name.endswith('.py'):
            print('WARNING: File %s is not python module! Skip it...'%file_name)
            continue
        num = file_name.split('_')[0]
        try:
            num = int(num)
        except ValueError, err:
            print('WARNING: File %s has invalid name. Valid format: '\
                  'XXX_<file name>.py, where XXX - integer upgrade version. Skip it...'%file_name)
            continue

        if num <= cur_ver:
            print('INFO: %s is already processed on this node'%file_name)
            continue

        scripts[num] = file_name

    for num in sorted(scripts.keys()):
        yield num, scripts[num]


def run_script(script_name):
    proc = subprocess.Popen(['python', os.path.join(SCRIPTS_DIR, script_name)])

    cout, cerr = proc.communicate()

    return proc.returncode


def upgrade():
    try:
        cur_ver = get_current_upgrade_ver()

        for ver, script_name in get_next_upgrade_script(cur_ver):
            print('INFO: Starting %s script ...'%script_name)
            ret = run_script(script_name)
            if ret:
                raise Exception('Processing %s is failed!'%(script_name))

            update_current_upgrade_ver(ver)
    except Exception, err:
        print('ERROR: %s'%err)
        return 1

    return 0

if __name__ == '__main__':
    sys.exit(upgrade())
