#!/usr/bin/python
import os
import sys
import signal
import time
import subprocess
import socket
import ConfigParser

NODE_SCRIPT = os.path.abspath(os.path.join(os.path.dirname(__file__), 'fabnet-node'))
PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))

sys.path.insert(0, PYPATH)
from fabnet.core.config import Config

DEFAULT_PORT = 1987
DEFAULT_HOME = os.path.abspath(os.path.join(os.environ.get('HOME', '/tmp'), 'fabnet_node_home'))


def usage():
    print('Usage: node-daemon init-config')
    print('           or')
    print('       node-daemon start [<neighbour node>[:port]|init-fabnet <node addr> <node name> <node type>]')
    print('           or')
    print('       node-daemon reload')
    print('           or')
    print('       node-daemon stop')
    print('           or')
    print('       node-daemon status')
    print('\n   You can redefine following environment variables: FABNET_NODE_HOME')
    print('   Node init config is saving to $FABNET_NODE_HOME/node_config file')
    print('   If you want start secured fabnet node, home directory should contain key storage file named in format *.ks')


def stop_node(PID_FILE):
    print('stopping fabnet node...')
    if not os.path.exists(PID_FILE):
        sys.stderr.write('No pid file found at %s\n'%PID_FILE)
        sys.exit(20)
    pid = int(open(PID_FILE).read())

    if os.path.exists('/proc/%s'%pid):
        try:
            os.kill(pid, signal.SIGINT)
        except OSError, err:
            sys.stderr.write('Can not stop process with PID=%s. Details: %s\n'%(pid, err))

    for i in xrange(30):
        time.sleep(1)
        if not os.path.exists('/proc/%i'%pid):
            break
    else:
        sys.stderr.write('Cant stop fabnet node! See logs for details...\n')
        sys.exit(1)
    print('fabnet node is stopped!')
    os.remove(PID_FILE)


def start_node(node_address, neighbour, node_name, home_dir, node_type, pid_file, input_pwd=False):
    if is_node_started(pid_file):
        print('fabnet node is already started!')
        sys.exit(30)

    home_dir = os.path.abspath(home_dir)
    if not os.path.exists(home_dir):
        try:
            os.makedirs(home_dir)
        except OSError, err:
            sys.stderr.write('Home directory %s can not be created. Details: %s\n'%(home_dir, err))
            sys.exit(3)

    keystore = ''
    for fname in os.listdir(home_dir):
        if fname.endswith('.ks'):
            keystore = os.path.join(home_dir, fname)
            break

    print('starting fabnet node...')
    print(' => home directory: %s'%home_dir)
    print(' => node address: %s'%node_address)
    print(' => first neighbour: %s'%neighbour)
    print(' => node name: %s'%node_name)
    print(' => node type: %s'%node_type)
    print(' => key storage: %s'%(keystore or 'none'))

    cmd = [NODE_SCRIPT, node_address, neighbour, node_name, \
                home_dir, node_type]
    if keystore:
        cmd.append(os.path.abspath(keystore))
    if keystore and input_pwd:
        cmd.append('--input-pwd')

    sp = subprocess.Popen(cmd)
    sp.communicate()
    rcode = wait_node_start(home_dir)
    if rcode:
        sys.stderr.write('trying to stop partly started node...\n')
        stop_node(pid_file)
        sys.exit(rcode)
        

def wait_node_start(home_dir):
    status_file = os.path.join(home_dir, 'node-daemon.status')
    for i in xrange(30):
        time.sleep(1)
        if not os.path.exists(status_file):
            continue

        data = open(status_file).read()
        parts = data.split('\n')
        code = int(parts[0])
        if len(parts) == 1:
            msg = 'unknown'
        else:
            msg = '\n'.join(parts[1:])
        if code == 0:
            sys.stdout.write('fabnet node is started successfully.\n')
            return 0
        else:
            sys.stderr.write('ERROR! fabnet node does not started!\nDetails: %s\n'%msg)
            return 1

    sys.stderr.write('ERROR! fabnet node start is timeouted!\n')
    return 2

def is_node_started(PID_FILE):
    if not os.path.exists(PID_FILE):
        return False
    if not os.path.exists('/proc/%s'%open(PID_FILE).read()):
        return False
    return True

def get_init_config(home_dir):
    hostname = socket.gethostname()
    config = {'FABNET_NODE_HOST': hostname,
              'FABNET_NODE_PORT': DEFAULT_PORT,
              'FIRST_NEIGHBOUR': 'init-fabnet',
              'NODE_NAME': hostname,
              'NODE_TYPE': None}

    config_file = os.path.join(home_dir, 'node_config')
    if os.path.exists(config_file): 
        Config.load(config_file)
        config.update(Config.get_config_dict('init', {}))
    return config
            

def save_init_config(home_dir, config):
    config_file = os.path.join(home_dir, 'node_config')
    Config.load(config_file)

    try:
        Config.update_config(config, 'init')
    except IOError, err:
        sys.stderr.write('Init config can not be created! Details: %s\n'%err)
        sys.exit(3)


def main(argv):
    if len(argv) < 2:
        usage()
        sys.exit(1)

    home_dir = os.environ.get('FABNET_NODE_HOME', DEFAULT_HOME)
    PID_FILE = os.path.join(home_dir, 'node-daemon.pid')
    if argv[1] == 'start':
        config = get_init_config(home_dir)
        if argv[-1] == '--input-pwd':
            input_pwd = True
            argv = argv[:-1]
        else:
            input_pwd = False

        if (config['NODE_TYPE'] is None and len(argv) < 6) or len(argv) > 6:
            usage()
            sys.exit(1)

        if len(argv) == 6:
            config['FIRST_NEIGHBOUR'] = argv[2]
            node_address = argv[3]
            config['NODE_NAME'] = argv[4]
            config['NODE_TYPE'] = argv[5]

            if ':' in node_address:
                ip_addr, port = node_address.split(':')
            else:
                ip_addr, port = node_address, DEFAULT_PORT
            config['FABNET_NODE_HOST'], config['FABNET_NODE_PORT'] = ip_addr, port
            

        ip_addr = config['FABNET_NODE_HOST']
        port = config['FABNET_NODE_PORT']
        node_address = '%s:%s'%(ip_addr, port)

        start_node(node_address, config['FIRST_NEIGHBOUR'], config['NODE_NAME'], \
                home_dir, config['NODE_TYPE'], PID_FILE, input_pwd)
        save_init_config(home_dir, config)
    elif argv[1] == 'stop':
        stop_node(PID_FILE)
    elif argv[1] == 'reload':
        if not os.path.exists(PID_FILE):
            sys.stderr.write('No pid file found at %s\n'%PID_FILE)
            sys.exit(1)

        config = get_init_config(home_dir)
        if config['NODE_TYPE'] is None:
            sys.stderr.write('Invalid node config at %s\n'%home_dir)
            sys.exit(1)

        stop_node(PID_FILE)

        cmd = ['', 'start'] 
        if '--input-pwd' in argv:
            cmd.append('--input-pwd')
        main(cmd)
    elif argv[1] == 'status':
        if is_node_started(PID_FILE):
            print ('Fabnet node is started!')
        else:
            print ('Fabnet node is stopped!')
    elif argv[1] == 'init-config':
        config = get_init_config(home_dir)
        save_init_config(home_dir, config)
        print 'init config is saved to %s'%home_dir
    else:
        usage()
        sys.exit(1)

if __name__ == '__main__':
    main(sys.argv)


