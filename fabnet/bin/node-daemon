#!/usr/bin/python
import os
import sys
import signal
import time
import subprocess

NODE_SCRIPT = os.path.abspath(os.path.join(os.path.dirname(__file__), 'fabnet-node'))
PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))

DEFAULT_PORT = 1987
DEFAULT_HOME = os.path.abspath(os.path.join(os.environ.get('HOME', '/tmp'), 'fabnet_node_home'))


def usage():
    print('Usage: %s start <neighbour node>[:port] <node name> <node type> [<key storage path>]'%sys.argv[0])
    print('           or')
    print('       %s reload'%sys.argv[0])
    print('           or')
    print('       %s stop'%sys.argv[0])
    print('           or')
    print('       %s status'%sys.argv[0])
    print('\n   You can redefine following environment variables: FABNET_NODE_HOST, FABNET_NODE_PORT, FABNET_NODE_HOME')


def stop_node():
    home_dir = os.environ.get('FABNET_NODE_HOME', DEFAULT_HOME)
    PID_FILE = os.path.join(home_dir, 'node-daemon.pid')
    print('Stopping fabnet node...')
    if not os.path.exists(PID_FILE):
        sys.stderr.write('No pid file found at %s\n'%PID_FILE)
        sys.exit(1)
    pid = int(open(PID_FILE).read())
    os.kill(pid, signal.SIGINT)
    for i in xrange(30):
        time.sleep(1)
        if not os.path.exists('/proc/%i'%pid):
            break
    else:
        sys.stderr.write('Cant stop fabnet node! See logs for details...\n')
        sys.exit(1)
    print('Fabnet node is stopped!')
    os.remove(PID_FILE)


def start_node(node_address, neighbour, node_name, home_dir, node_type, keystore=''):
    print('starting fabnet node...')
    home_dir = os.path.abspath(home_dir)
    if not os.path.exists(home_dir):
        os.makedirs(home_dir)

    cmd = '%s %s %s %s %s %s' \
             %(NODE_SCRIPT, node_address, neighbour, node_name, \
                home_dir, node_type)
    cmd = cmd.split()
    if keystore:
        cmd.append(os.path.abspath(keystore))

    sp = subprocess.Popen(cmd)
    sp.communicate()
    print('Fabnet node is started! See syslog for details')

def is_node_started():
    home_dir = os.environ.get('FABNET_NODE_HOME', DEFAULT_HOME)
    PID_FILE = os.path.join(home_dir, 'node-daemon.pid')
    if not os.path.exists(PID_FILE):
        return False
    if not os.path.exists('/proc/%s'%open(PID_FILE).read()):
        return False
    return True

if __name__ == '__main__':
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    if sys.argv[1] == 'start':
        if len(sys.argv) < 5:
            usage()
            sys.exit(1)

        neighbour = sys.argv[2]

        node_name = sys.argv[3]
        node_type = sys.argv[4]
        keystore = ''
        if len(sys.argv) > 5:
            keystore = sys.argv[5]

        ip_addr = os.environ.get('FABNET_NODE_HOST', '0.0.0.0')
        port = os.environ.get('FABNET_NODE_PORT', DEFAULT_PORT)
        home_dir = os.environ.get('FABNET_NODE_HOME', DEFAULT_HOME)
        node_address = '%s:%s'%(ip_addr, port)

        start_node(node_address, neighbour, node_name, home_dir, node_type, keystore)
    elif sys.argv[1] == 'stop':
        stop_node()
    elif sys.argv[1] == 'reload':
        home_dir = os.environ.get('FABNET_NODE_HOME', DEFAULT_HOME)
        PID_FILE = os.path.join(home_dir, 'node-daemon.pid')
        if not os.path.exists(PID_FILE):
            sys.stderr.write('No pid file found at %s\n'%PID_FILE)
            sys.exit(1)

        cmd = open('/proc/%s/cmdline'%open(PID_FILE).read()).read()
        cmd = cmd.strip('\x00').split('\x00')

        stop_node()
        start_node(*cmd[2:])
    elif sys.argv[1] == 'status':
        if is_node_started():
            print ('Fabnet node is started!')
        else:
            print ('Fabnet node is stopped!')
    else:
        usage()
        sys.exit(1)

