#!/usr/bin/python
import os
import sys
import signal
import time
import subprocess
import socket
import ConfigParser

NODE_SCRIPT = os.path.abspath(os.path.join(os.path.dirname(__file__), 'fabnet-node'))
PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))

DEFAULT_PORT = 1987
DEFAULT_HOME = os.path.abspath(os.path.join(os.environ.get('HOME', '/tmp'), 'fabnet_node_home'))


def usage():
    print('Usage: %s start [<neighbour node>[:port]|init-fabnet <node name> <node type>]'%sys.argv[0])
    print('           or')
    print('       %s reload'%sys.argv[0])
    print('           or')
    print('       %s stop'%sys.argv[0])
    print('           or')
    print('       %s status'%sys.argv[0])
    print('\n   You can redefine following environment variables: FABNET_NODE_HOME')
    print('   Node init config is saving to $FABNET_NODE_HOME/init_config file')
    print('   If you want start secured fabnet node, home directory should contain key storage file named in format *.ks')


def stop_node(PID_FILE):
    print('Stopping fabnet node...')
    if not os.path.exists(PID_FILE):
        sys.stderr.write('No pid file found at %s\n'%PID_FILE)
        sys.exit(1)
    pid = int(open(PID_FILE).read())
    os.kill(pid, signal.SIGINT)
    for i in xrange(30):
        time.sleep(1)
        if not os.path.exists('/proc/%i'%pid):
            break
    else:
        sys.stderr.write('Cant stop fabnet node! See logs for details...\n')
        sys.exit(1)
    print('Fabnet node is stopped!')
    os.remove(PID_FILE)


def start_node(node_address, neighbour, node_name, home_dir, node_type, keystore=''):
    print('starting fabnet node...')
    print(' => home directory: %s'%home_dir)
    print(' => node address: %s'%node_address)
    print(' => first neighbour: %s'%neighbour)
    print(' => node name: %s'%node_name)
    print(' => node type: %s'%node_type)
    print(' => key storage: %s'%(keystore or 'none'))

    home_dir = os.path.abspath(home_dir)
    if not os.path.exists(home_dir):
        os.makedirs(home_dir)

    cmd = '%s %s %s %s %s %s' \
             %(NODE_SCRIPT, node_address, neighbour, node_name, \
                home_dir, node_type)
    cmd = cmd.split()
    if keystore:
        cmd.append(os.path.abspath(keystore))

    sp = subprocess.Popen(cmd)
    sp.communicate()
    print('Fabnet node is started! See syslog for details')

def is_node_started(PID_FILE):
    if not os.path.exists(PID_FILE):
        return False
    if not os.path.exists('/proc/%s'%open(PID_FILE).read()):
        return False
    return True

def get_init_config(home_dir):
    hostname = socket.gethostname()
    config = {'FABNET_NODE_HOST': hostname,
              'FABNET_NODE_PORT': DEFAULT_PORT,
              'FIRST_NEIGHBOUR': 'init-fabnet',
              'NODE_NAME': hostname,
              'NODE_TYPE': None}

    init_config = os.path.join(home_dir, 'init_config')
    if not os.path.exists(init_config):
        return config
    
    config_file = ConfigParser.RawConfigParser(allow_no_value=True)
    config_file.read(init_config)
    for config_key in config:
        try:
            val = config_file.get('init', config_key)
            config[config_key] = val
        except ConfigParser.Error, err:
            pass

    return config
            

def save_init_config(home_dir, config):
    config_file = ConfigParser.RawConfigParser()
    config_file.add_section('init')
    for key, val in config.items():
        config_file.set('init', key, val)
    
    init_config = os.path.join(home_dir, 'init_config')
    with open(init_config, 'wb') as configfile:
        config_file.write(configfile)


def main(argv):
    if len(argv) < 2:
        usage()
        sys.exit(1)

    home_dir = os.environ.get('FABNET_NODE_HOME', DEFAULT_HOME)
    PID_FILE = os.path.join(home_dir, 'node-daemon.pid')
    if argv[1] == 'start':
        if is_node_started(PID_FILE):
            print('Node is already started!')
            sys.exit(1)

        if not os.path.exists(home_dir):
            print('Error! Home directory %s does not exists'%home_dir)
            sys.exit(1)

        config = get_init_config(home_dir)

        if config['NODE_TYPE'] is None and len(argv) < 5:
            usage()
            sys.exit(1)

        if len(argv) == 5:
            config['FIRST_NEIGHBOUR'] = argv[2]
            config['NODE_NAME'] = argv[3]
            config['NODE_TYPE'] = argv[4]

        ip_addr = config['FABNET_NODE_HOST']
        port = config['FABNET_NODE_PORT']
        node_address = '%s:%s'%(ip_addr, port)

        keystore = ''
        for fname in os.listdir(home_dir):
            if fname.endswith('.ks'):
                keystore = os.path.join(home_dir, fname)
                break

        start_node(node_address, config['FIRST_NEIGHBOUR'], config['NODE_NAME'], \
                home_dir, config['NODE_TYPE'], keystore)
        save_init_config(home_dir, config)
    elif argv[1] == 'stop':
        stop_node(PID_FILE)
    elif argv[1] == 'reload':
        if not os.path.exists(PID_FILE):
            sys.stderr.write('No pid file found at %s\n'%PID_FILE)
            sys.exit(1)

        config = get_init_config(home_dir)
        if config['NODE_TYPE'] is None:
            sys.stderr.write('Invalid node config at %s\n'%home_dir)
            sys.exit(1)

        stop_node(PID_FILE)

        main(['', 'start'])
    elif argv[1] == 'status':
        if is_node_started(PID_FILE):
            print ('Fabnet node is started!')
        else:
            print ('Fabnet node is stopped!')
    else:
        usage()
        sys.exit(1)

if __name__ == '__main__':
    main(sys.argv)


