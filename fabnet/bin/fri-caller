#!/usr/bin/python
import os
import sys
import json
import getpass

PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.insert(0, PYPATH)

from fabnet.core.fri_base import FabnetPacketRequest
from fabnet.core.fri_client import FriClient
from fabnet.core.key_storage import init_keystore

def usage():
    print('Usage: %s <operation> <node address> <parameters in json format> sync|async [<key storage path>]'%sys.argv[0])

def print_resp(params, prefix=''):
    for key, value in params.items():
        if type(value) == dict:
            print '%s%s:'%(prefix, key)
            print_resp(value, prefix+'\t')
        else:
            print '%s%s: %s'%(prefix, key, value)

def call_operation(operation, node_address, params, sync, ks_path):
    try:
        params = json.loads(params)
    except Exception, err:
        print('Parameters are invalid! Details: %s'%err)
        return 1

    packet = FabnetPacketRequest(method=operation, sender=None, parameters=params, sync=sync)

    if ks_path:
        ks_passwd = getpass.getpass('Key storage password: ')
        key_storage = init_keystore(ks_path, ks_passwd)
        cert = key_storage.get_node_cert()
        ckey = key_storage.get_node_cert_key()
    else:
        cert = ckey = None

    client = FriClient(bool(cert), cert, ckey)
    if not sync:
        rcode, rmsg = client.call(node_address, packet)

        if rcode == 0:
            print('Operation "%s" is started over fabnet.'%operation)
        else:
            print('Operation "%s" does not started! Details: %s'%(operation, rmsg))

        return rcode
    else:
        resp = client.call_sync(node_address, packet)
        print 'RET CODE: %s'% resp.ret_code
        print 'RET MESSAGE: %s'% (resp.ret_message or 'ok')
        print_resp(resp.ret_parameters)

        return resp.ret_code


if __name__ == '__main__':
    if len(sys.argv) < 5:
        usage()
        sys.exit(1)

    operation = sys.argv[1]
    node_address = sys.argv[2]
    params = sys.argv[3]
    if sys.argv[4] == 'sync':
        sync = True
    elif sys.argv[4] == 'async':
        sync = False
    else:
        print 'Unknown operation mode "%s". Supported modes: sync and async'%sys.argv[4]

    if len(sys.argv) > 5:
        ks_path = sys.argv[5]
    else:
        ks_path = ''

    try:
        rcode = call_operation(operation, node_address, params, sync, ks_path)
    except Exception, err:
        print 'Error! %s'%err
        sys.exit(1)

    sys.exit(rcode)
