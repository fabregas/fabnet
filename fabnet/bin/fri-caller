#!/usr/bin/python
import os
import sys
import json

PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.insert(0, PYPATH)

from fabnet.core.fri_base import FriClient, FabnetPacketRequest

def usage():
    print('Usage: %s <operation> <node address> [parameters in json format] [sync]'%sys.argv[0])

def print_resp(params, prefix=''):
    for key, value in params.items():
        if type(value) == dict:
            print '%s%s:'%(prefix, key)
            print_resp(value, prefix+'\t')
        else:
            print '%s%s: %s'%(prefix, key, value)

def call_operation(operation, node_address, params, sync):
    try:
        params = json.loads(params)
    except Exception, err:
        print('Parameters are invalid! Details: %s'%err)
        return 1

    packet = FabnetPacketRequest(method=operation, sender=None, parameters=params, sync=sync)
    client = FriClient()
    if not sync:
        rcode, rmsg = client.call(node_address, packet)

        if rcode == 0:
            print('Operation "%s" is started over fabnet.'%operation)
        else:
            print('Operation "%s" does not started! Details: %s'%(operation, rmsg))

        return rcode
    else:
        resp = client.call_sync(node_address, packet)
        print 'RET CODE: %s'% resp.ret_code
        print 'RET MESSAGE: %s'% (resp.ret_message or 'ok')
        print_resp(resp.ret_parameters)

        return resp.ret_code


if __name__ == '__main__':
    if len(sys.argv) < 3:
        usage()
        sys.exit(1)

    operation = sys.argv[1]
    node_address = sys.argv[2]
    params = '{}'
    if len(sys.argv) > 3:
        params = sys.argv[3]

    if 'sync' in sys.argv:
        sync = True
    else:
        sync = False

    rcode = call_operation(operation, node_address, params, sync)
    sys.exit(rcode)
