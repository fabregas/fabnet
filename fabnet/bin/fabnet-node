#!/usr/bin/python

import os
import sys
import signal
import time
import logging
import getpass
import daemon

PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.insert(0, PYPATH)

import fabnet
import fabnet.core
import fabnet.core.node as node
from fabnet.utils.logger import logger

fabnet_node = None
started = True

DEFAULT_PORT = 1987
INIT_NEIGHBOUR = 'init-fabnet'


def stop(s, p):
    global fabnet_node, started
    try:
        logger.info('STOPPING FABNET NODE...')
        if fabnet_node:
            fabnet_node.stop()
            logger.info('Fabnet node is stopped')
            started = False
    except Exception, err:
        logger.error('Stoping fabnet node error: %s'%err)


def start(args):
    try:
        global fabnet_node, started
        if args and args[-1] == '--nodaemon':
            nodaemon = True
            args = args[:-1]
        else:
            nodaemon = False

        if len(args) < 5:
            logger.error('Usage: fabnet-node <node address> <neighbour address>|init-fabnet <node_name> <home_dir> <node_type> [<keystore path>]')
            sys.exit(1)

        hostname, port = args[0].split(':')
        port = int(port)
        neighbour = args[1]

        if ':' not in neighbour and neighbour != INIT_NEIGHBOUR:
            neighbour = '%s:%s'%(neighbour, DEFAULT_PORT)

        if neighbour == INIT_NEIGHBOUR:
            neighbour = None

        node_name = args[2]
        home_dir = args[3]
        node_type = args[4]

        ks_path = ks_passwd = None
        if len(args) > 5 and not args[5].startswith('--'):
            ks_path = args[5]

        if '--debug' in args:
            logger.setLevel(logging.DEBUG)

        if ks_path and not ks_passwd:
            if '--input-pwd' in args:
                ks_passwd = raw_input('Key storage password: ')
            else:
                ks_passwd = getpass.getpass('Key storage password: ')

        def main_routine():
            global fabnet_node, started
            status_file = os.path.join(home_dir, 'node-daemon.status') 
            if os.path.exists(status_file):
                os.remove(status_file)

            try:
                open(os.path.join(home_dir, 'node-daemon.pid'), 'w').write(str(os.getpid()))
            except Exception, err:
                logger.error('Cant write pid file. Details: %s'%err)

            try:
                fabnet_node = node.Node(hostname, port, home_dir, node_name, ks_path, ks_passwd, node_type)
                fabnet_node.start(neighbour)

                signal.signal(signal.SIGINT, stop)

                open(status_file, 'w').write('0\nstarted succefully')

                while started:
                    time.sleep(1)
            except Exception, err:
                open(status_file, 'w').write('1\nInit fabnet node failed: %s'%err)
                logger.error('init fabnet node error: %s'%err)

        if nodaemon:
            main_routine()
        else:
            with daemon.DaemonContext():
                main_routine()
    except Exception, err:
        logger.error('fabnet node error: %s. exit!'%err)
        stop(None, None)
        sys.exit(1)

if __name__ == '__main__':
    start(sys.argv[1:])
