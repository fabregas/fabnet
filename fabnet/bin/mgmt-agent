#!/usr/bin/python
import os
import sys
import time
import argparse
import signal
import daemon
import tempfile

PYPATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.insert(0, PYPATH)

from fabnet.mgmt.management_agent import ManagementAgent, DEFAULT_MGMT_PORT
from fabnet.core.key_storage import AbstractKeyStorage
from fabnet.utils.logger import oper_logger as logger

def detect_ks():
    def find_ks(p_dir):
        keystore = ''
        for fname in os.listdir(p_dir):
            if fname.endswith('.ks'):
                keystore = os.path.abspath(os.path.join(p_dir, fname))
                break
        return keystore

    keystore = find_ks('.')
    if not keystore:
        keystore = find_ks(os.getenv("HOME"))

    if keystore:
        print('detected admin key storage at %s'%keystore)
    else:
        print('admin key storage does not detected. starting insecure agent...')
    return keystore
    

def get_pid_file():
    tmp_dir = tempfile.gettempdir()
    return os.path.join(tmp_dir, 'mgmt-agent-daemon.pid')

def check_started_daemon(allow_reload):
    pid_file = get_pid_file()
    if not os.path.exists(pid_file):
        return
    pid = int(open(pid_file).read())

    print('found already started mamagement agent daemon with PID=%s'%pid)
    if not allow_reload:
        sys.stderr.write('Management agent is already started (run with --force flag for reload)\n')
        sys.exit(30)

    if os.path.exists('/proc/%s'%pid):
        print ('stopping management agent daemon...')
        try:
            os.kill(pid, signal.SIGINT)
        except OSError, err:
            sys.stderr.write('Can not stop process with PID=%s. Details: %s\n'%(pid, err))
    else:
        return

    for i in xrange(30):
        time.sleep(1)
        if not os.path.exists('/proc/%i'%pid):
            print ('done')
            break
    else:
        sys.stderr.write('Cant stop manangement agent! See logs for details...\n')
        sys.exit(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Management agent daemon')
    parser.add_argument('--host', dest='host',
                   help='manangent agent bind hostname or IP address (0.0.0.0 by default)')
    parser.add_argument('--port', type=int, dest='port',
                   help='manangent agent bind port (%s by default)'% DEFAULT_MGMT_PORT)
    parser.add_argument('--ks-path', dest='ks_path',
                   help='manangent agent key storage path for SSL transport support '\
                           '(*.ks file in current or home directory used by default)')
    parser.add_argument('--daemonize', '-d', dest='daemon', action='store_true',
                   help='run management agent in background as a daemon')
    parser.add_argument('--force', '-f', dest='force', action='store_true',
                   help='reload management agent if started')
    args = parser.parse_args()

    ks_path = args.ks_path
    if not ks_path:
        ks_path = detect_ks()

    try:
        if ks_path:
            keystore = AbstractKeyStorage(ks_path, None)
        else:
            keystore = None
    except Exception, err:
        sys.stderr.write('ERROR: %s\n'%err)
        sys.exit(1)

    def main_routine():
        mgmt_agent = ManagementAgent(args.host, args.port, keystore)
        mgmt_agent.start()
        def stop(a,b):
            mgmt_agent.stop()
            sys.exit(0)

        signal.signal(signal.SIGINT, stop)
        while True:
            time.sleep(1)

    if not args.daemon:
        main_routine()
    else:
        check_started_daemon(args.force)
        print('starting management agent daemon in background...')
        with daemon.DaemonContext():
            try:
                open(get_pid_file(), 'w').write(str(os.getpid()))
            except Exception, err:
                logger.error('Cant write pid file. Details: %s'%err)

            try:
                main_routine()
            except Exception, err:
                logger.error('ERROR: %s'%err)

